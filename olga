#!/usr/bin/perl -s

use strict;
use vars qw($channel $mynick $data $irc $conn $james $trans);
use lib qw(/home/james/devel/cim/projects/01_olga);
use Net::IRC;
use Text::Wrap qw(fill $columns);
use LWP::Simple;
use XML::RSS;
use XML::Simple;
use JSON::XS;
use Data::Dumper;

require "movie_quotes.pl";
require "movie_trivia.pl";
require "dpaste.pl";
require "admin.pl";
require "config.pl";

$columns = 450;

my @spacerobots =
(
 "I am the Pusher robot.",
 "I am the Shover robot.",
 "Pushing will protect you from the terrible secret of space.",
 "Shoving will protect you from the terrible secret of space.",
);

my @factsnark =
(
 "http://bit.ly/4kb77v",
 "Have you considered adding a bookmark?",
 "You know you can message me the query so it's not broadcast...",
);

my @panic =
(
 "http://twitpic.com/3u9fuk",
 "http://twitpic.com/3u9f5m",
 "http://twitpic.com/3u9fk7",
 "http://www.youtube.com/watch?v=C_S5cXbXe-4",
);

my @about =
  (
   'may be talking about',
   'is probably referring to',
  );

my @eightball = (
  "As I see it, yes",
  "It is certain",
  "It is decidedly so",
  "Most likely",
  "Outlook good",
  "Signs point to yes",
  "Without a doubt",
  "Yes",
  "Yes â€“ definitely",
  "You may rely on it",
  "Reply hazy, try again",
  "Ask again later",
  "Better not tell you now",
  "Cannot predict now",
  "Concentrate and ask again",
  "Don't count on it",
  "My reply is no",
  "My sources say no",
  "Outlook not so good",
  "Very doubtful",
  );

my %bParams = qw(ELLINGTON_BRANCH Ell TEMPLATE_BRANCH MT
  YOUR_NAME Who BRANCH SV);

$channel = $ARGV[0] ? "#$ARGV[0]" : '#all';
$mynick = $ARGV[1];
print "channel: $channel\n";
$irc = new Net::IRC;
$mynick = 'olga' if (!$mynick);
$conn = $irc->newconn(
  Nick => "$mynick",
  Server => $config::server,
  Port => 6667,
  Ircname => 'Whatcha lookin at, bichachi?',
  Username => "$mynick",
  Password => $config::pw,
  );

$trans->{userhost} = '(j(ames|hsiao)|James_Hsi)';
$data->{jsonfile} = "${mynick}_dat.json";
&init_data($conn);

$conn->add_handler(['376', '422'], \&on_connect);
$conn->add_global_handler('disconnect', \&on_disconnect);
$conn->add_handler('public', \&on_public);
$conn->add_handler('msg', \&on_public);
$conn->add_handler('join', \&on_join);
$conn->add_handler('nick', \&on_nick);
$conn->add_handler('ping', \&on_ping, 2);
$conn->add_global_handler(353, \&on_names);

$irc->start;

sub on_connect {
  my $self = shift;

  print "Attempting to join $channel\n";
  eval { $self->join("$channel"); };
  if ($@) {
    print "$@";
  }
  $trans->{stfu}->{$channel} = 0;

  if ($mynick eq 'olga') {
    for my $chan (@config::channels) {
      eval { $self->join("#$chan"); };
      if ($@) {
        print "$@";
      }
      else {
        $trans->{stfu}->{"#$chan"} = 0;
      }
    }
  }

  srand($$);
}

# Reconnect to the server when we die.
sub on_disconnect {
  my ($self, $event) = @_;

  print "Disconnected from ". $event->from(), " (".
    ($event->args())[0]. "). Attempting to reconnect...\n";
  $self->connect();
}

sub on_join {
  my ($self, $event) = @_;
  my ($channel) = ($event->to)[0];

  printf "*** %s (%s) has joined channel %s\n",
  $event->nick, $event->userhost, $channel;

  if ($event->userhost =~ m/$trans->{userhost}/i) {
    push @{$trans->{master}}, $event->nick;
  }
}

sub on_names {
  my ($self, $event) = @_;
  my (@list) = $event->args ();

  print "names: @list\n";
}

sub on_nick {
  my ($self, $event) = @_;
  my ($channel) = ($event->to)[0];

  print Dumper($event);
  if ($event->userhost =~ m/$trans->{userhost}/i) {
    my ($newnick, $oldnick) = (($event->args())[0], $event->nick);
    my @nicks = grep { !/$oldnick/ } @{$trans->{master}};
    push @nicks, $newnick;
    $trans->{master} = \@nicks;
  }
}

sub on_ping {
  my ($self, $event) = @_;

  # &update_latest();
  &update_horoscopes();
  # &update_bugs($self);
  # &update_resolves($self);
  # &update_closed($self);
  # &update_fails($self);

  my $time = time();
  for my $channel (keys %{$trans->{stfu}}) {
    if ($time - $trans->{stfu}->{$channel} > 300) {
      $trans->{stfu}->{$channel} = 0;
    }
  }

  &write_data();
}

sub on_public {
  my ($self, $event) = @_;
  my ($nick, $userhost, $arg, $type) =
    ($event->nick, $event->userhost, $event->args, $event->type);
  my $msg = "$nick, ";

  my $channel = ($event->to)[0];
  my $to = $type eq 'msg' ? $nick : $channel;

  return if ($channel eq '#irpg');

  if ($type eq "msg") {
    print sprintf(qq(%s /msg'd me: %s), $event->nick, Dumper($event->args));
  }

  if (($type eq "msg") || ($arg =~ /^\s*$mynick/i)) {
    $arg =~ s/^\s*$mynick\s*[,:]?\s*//;

    if ($arg =~ /^bugcount\s*(.*)/) {
      my $filter = $1;
      my $count;
      if ($filter) {
        $count = scalar(grep {/$filter/i} keys %{$data->{bugs}});
        $filter .= ' ';
      }
      else {
        $count = scalar(keys %{$data->{bugs}});
      }
      $msg .= "\U$filter\EBug count at $count\n";
    }
    elsif ($arg =~ /^(latest|lb)\s+(.*)/) {
        $msg .= $data->{latest}->{lc($2)}
    }
    elsif ($arg =~ /^(lastreset)/) {
        $msg .= $data->{latest}->{'medley-dev-reset'}
    }
    elsif ($arg =~ /^(stock|quote)\s+(.*)/) {
    #   if (($1 eq "quote") && ($2 =~ /jay/i)) {
    #     my @askquotes = @jayquotes;
    #     $msg .= $askquotes[rand(@askquotes)];
    #   }
      for my $line (split(/\n/, &get_stockprice($2))) {
        $self->privmsg($to, $line);
        sleep 1;
      }
      undef $msg;
    }
    elsif ($arg =~ /^(dow|nasdaq|s&p)/i) {
      my %index =
        ( 'dow', '^DJI', 'nasdaq', '^IXIC', 's&p', '^SPX', );
      $msg = &get_stockprice($index{$1});
    }
    elsif ($arg =~ m/^haiku\s*(.*)/i) {
      if ($1) {
        &haiku($self, $to, $1);
      }
      else {
        &compose_poem($self, $to);
      }
    }
    elsif ($arg =~ m/^tanka/i) {
      &compose_poem($self, $to, 1);
    }
    elsif ($arg =~ m/^lunch\s*(.*)/i) {
      if ($1 =~ m/atlanta\-based, montana\-themed/i) {
        $msg = "Ted's Montana Grill";
      }
      elsif ($1 =~ m/^drive\s*(.*)/i) {
        if ($1 =~ m/add\s*(.*)/i) {
          push @{$data->{lunchdrive}}, $1;
          $msg = 'Added.';
        }
        else {
          $msg .= $data->{lunchdrive}->[rand(@{$data->{lunchdrive}})];
        }
      }
      elsif ($1 =~ m/^vegan\s*(.*)/i) {
        if ($1 =~ m/add\s*(.*)/i) {
          push @{$data->{lunchvegan}}, $1;
          $msg = 'Added.';
        }
        else {
          $msg .= $data->{lunchvegan}->[rand(@{$data->{lunchvegan}})];
        }
      }
      else {
        if ($1 =~ m/add\s*(.*)/i) {
          push @{$data->{lunch}}, $1;
          $msg = 'Added.';
        }
        else {
          $msg = $data->{lunch}->[rand(@{$data->{lunch}})];
        }
      }
    }
    elsif ($arg =~ /^mquote (.+)/) {
      my ($quote, $line);
      my ($title, $pos) = find_title_quotes ($1);
      if ($title && $pos) {
        ($title, $quote) = pick_quote ($title, $pos);
        $msg = "$title:\n" . join(' ', @$quote);
      }
      else {
        $msg = "Sorry, $nick.  I missed that one.\n";
      }
    }
    elsif ($arg =~ /^trivia (.+)/) {
      my ($trivia, $line);
      my ($title, $pos) = find_title_trivia ($1);
      if ($title && $pos) {
        ($title, $trivia) = pick_trivia ($title, $pos);
        $msg = "$title Trivia:\n" . join(' ', @$trivia);
      }
      else {
        $msg = "Sorry, $nick.  No soup for you.\n";
      }
    }
    elsif ($arg =~ /^scope\s*(.*)/i) {
      $msg = lc($1) eq 'ophiuchus'
        ? q(Dude, it's arbitary and fake anyways.)
        : $data->{horoscopes}->{lc($1)};
    }
	# elsif ($arg =~ /^countdown\s+(\d+)/) {
	#     if ($1 < 180) {
	# 	sleep $1;
	# 	$msg .= "this is your reminder.";
	#     }
	# }
    elsif ($arg =~ /^websters\s+black\s+crappie/) {
      $msg .= q(you can't even do that, so don't even try.);
    }
    elsif ($arg =~ /^(saurus|roget)\s+(.*)/) {
      $msg .= &saurus($2);
    }
    elsif ($arg =~ /^8ball/) {
      $msg .= $eightball[rand(@eightball)];
    }
    elsif ($arg =~ /^sniglet(.*)/) {
      $msg .= &get_sniglet($1);
    }
    elsif ($arg =~ /^(muntz|nelson)(\s+(.*))?/) {
      if ($3) {
        $msg = "$3, ";
      }
      $msg .= "http://is.gd/KOS2vx";
    }
    elsif ($arg =~ /^abuse\s+([^ ]*)/) {
      $msg = "$1, " . &get_abuse();
    }
    elsif (($arg =~ /^stfu/i) && ($type eq 'public')) {
      $trans->{stfu}->{$channel} = time();
      $msg = 'Right-o.';
    }
    elsif (($arg =~ /^speak/i) && ($type eq 'public')) {
      $trans->{stfu}->{$channel} = 0;
      $msg = 'Zug-zug.';
    }
    # elsif ($arg =~ /^rhetorical(.*)/) {
    #   $msg .= q(because they're stupid...);
    # }
    elsif ($arg =~ /^morse\s+(.*)/) {
      $msg .= &get_morse($1)
    }
    elsif ($arg =~ /^horoscope\s+([^\s]+)/) {
      my $sagscope = "Dear Teeth-Shaking, Glass-Breaking,
                      Rump-Roasting Bun-Toasting Flash of Liquid Lightning: I
                      dreamed you finally revealed your secret identity after
                      all these years--you know, about how you came from the
                      planet Lovemania in order to teach all earthlings how to
                      feel horny for clouds, trees, tigers, and even the ocean
                      itself! Is my dream true? Please say it is! Tell me
                      you're really ready to drop your overly respectable pose
                      so that you may spread erotic healing throughout the
                      land! Dare to become the sublimely lustful worshiper of
                      beauty and truth you were born to be!";

      if ($1 !~ /sagittarius/i) {
        $msg = "$1, you're gonna die";
        $msg .= " twice" if ($1 =~ /gemini/i);
        $msg .= ".";
      }
      else {
        $msg = "Sagittarius: $sagscope";
      }
    }
    elsif ($arg =~ /^forget\s+(.*)/) {
      delete $data->{facts}->{lc($1)};
      $msg .= "baleeted.";
    }
    elsif ($arg =~ /^help/) {
      my @funcs = qw(stock quote dow nasdaq s&p haiku tanka
                     scope saurus roget sniglet abuse morse
                     horoscope forget jquery lunch);
      $msg .= sprintf("Usage: $mynick <%s>", join('|', @funcs));
    }
    # master commands
    elsif ($arg =~ /^admin/) {
      $arg =~ s/^admin\s*//;
      my $return = &master(self => $self,
                           data => $data,
                           trans => $trans,
                           to => $to,
                           msg => $msg,
                           arg => $arg,
                           nick => $nick,
                           userhost => $userhost
        );
      $data = $return->{data};
      $trans = $return->{trans};
      $to = $return->{to};
      $msg = $return->{msg};
    }
    else {
      my (@wit) =
        (
         "PAK CHOOIE UNF",
         "I'll be in my bunk...",
         "hey, how's it goin?",
         "You know what the chain of command is? It's the chain I go get and beat you with 'til ya understand who's in ruttin' command here.",
        );
      push @wit, @spacerobots;
      $msg .= $wit[rand(@wit)] if (rand() < $data->{talkback});
    }
    &fill_output($self, $msg, $to) unless $msg eq "$nick, ";
  }

  # Unaddressed responses
  if ($arg =~ /^(sudo |ls( .*)?|pwd|cd( .*)?|rm( .*)?)$/) {
    $msg = "this ain\'t your shell window";
    $self->privmsg($to, "$msg\n")
      unless ($trans->{stfu}->{$channel});
  }
  elsif ($arg =~ /^(\:wq)$/) {
    $msg = "this ain\'t your vi";
    $self->privmsg($to, "$msg\n")
      unless ($trans->{stfu}->{$channel});
  }
  elsif ($arg =~ m/^.*dubstep/i) {
    $msg = "wub" x (int(rand(10))+1);
    $self->privmsg($to, "$msg\n")
      unless ($trans->{stfu}->{$channel});
  }
  elsif ($arg =~ /PAK.*UNF/) {
    $msg = $spacerobots[rand(@spacerobots)];
    $self->privmsg($to, "$msg\n")
      unless ($trans->{stfu}->{$channel});
  }
  elsif ($arg =~ /pythonpath/i) {
    $msg = "If you're mucking with your PYTHONPATH, you're doing it wrong.";
    $self->privmsg($to,"$msg\n")
      unless ($trans->{stfu}->{$channel});
  }
  elsif ($arg =~ /time\.sleep/i) {
    $msg = "If you're using time.sleep, you're doing it wrong.";
    $self->privmsg($to,"$msg\n")
      unless ($trans->{stfu}->{$channel});
  }
  elsif ($arg =~ m/^SPROUT/) {
    $msg = "CORE!";
    $self->privmsg($to,"$msg\n")
      unless ($trans->{stfu}->{$channel});
  }
  elsif ($arg =~ m/^MOVABLE/) {
    $msg = "TYPE!";
    $self->privmsg($to,"$msg\n")
      unless ($trans->{stfu}->{$channel});
  }
  elsif ($arg =~ m/(panic|shock|screen ?pass)/) {
    $msg = $panic[rand(@panic)];
    $self->privmsg($to,"$msg\n")
      unless ($trans->{stfu}->{$channel});
  }
  # store facts
  elsif ($arg =~ m/^((\S*?)\s+(is|are|=)\s+([^;\?]*))$/i) {
    my ($sentence, $subject, $predicate) = ($1, $2, $4);
    my $ts = sprintf("%s at %04d%02d%02d.%02d%02d", $nick,
                     (localtime())[5]+1900,(localtime())[4]+1,
                     (localtime())[3,2,1]);
    if ($predicate =~ m/\`/) {
      $self->privmsg($to, "You can't even do that, so don't even try.");
    }
    elsif ($predicate =~ m/^<reply>\s*/) {
      $predicate =~ s/^<reply>\s*//;
      $data->{facts}->{lc($subject)} = "$predicate ($ts)";
    }
    else {
      $data->{facts}->{lc($subject)} = "$sentence ($ts)"
        unless $data->{facts}->{lc($subject)};
    }
  }
  # display facts
  elsif ($arg =~ m/^(\S*)\?$/) {
    my $fact = $data->{facts}->{lc($1)};
    if (($fact =~ m/^http/) && (rand() < 0.10) && ($type ne 'msg')) {
        $self->privmsg($to, $factsnark[rand(@factsnark)]);
    }
    else {
      $self->privmsg($to, $fact);
    }
  }
  elsif ($arg =~ m/((CMS[A-Z]+|CHR|GUR|WD|FR|HELPDESK|SUPPORT|PMR)-[0-9]+)/i) {
    my $ticket = $1;
    if ($arg !~ m{browse/$1}) {
      # record recent tickets
      my $time = time();
      if ($time - $trans->{recent}->{$ticket}->{time} > 10*60) {
        $trans->{recent}->{$ticket}->{time} = time();
        $trans->{recent}->{$ticket}->{count} = 1;
      }
      else {
        if ($time - $trans->{recent}->{$ticket}->{time} < 20) {
          $trans->{recent}->{$ticket}->{count}++;
        }
      }

      # check message type
      if ($trans->{recent}->{$ticket}->{count} > 4) {
        undef $msg;
      }
      elsif ($trans->{recent}->{$ticket}->{count} > 3) {
        $msg = "Seriously, dude. That's annoying. Quit it.";
      }
      elsif ($trans->{recent}->{$ticket}->{count} > 2) {
        $msg = "Dude, quit it.";
      }
      else {
        $msg =
          sprintf("%s %s %s", $nick, $about[rand(@about)],
                  "https://jira.cmgdigital.com/browse/\U$1\E");
      }

      # output message
      if ($msg) {
        $self->privmsg($to, "$msg\n")
          unless ($trans->{stfu}->{$channel});
      }
    }
  }
}

sub fill_output {
  my ($self, $msg, $to) = @_;

  # kill existing lines
  $msg =~ s/\n/ /g;

  my @result = split(/\n/, fill('', '', $msg));
  for my $line (@result) {
    $self->privmsg($to, $line);
    sleep 1;
  }
}

sub haiku {
  my ($conn, $to, $args) = @_;

  my $usage = "Usage: haiku add (fives|sevens) <phrase>\n";


  if ($args) {
    $args =~ m/^(\S*)\s+(\S*)\s+(.*)$/;
    my ($proc, $type, $phrase) = ($1, $2, $3);

    if (($proc !~ m/^(add|remove|use)/i) || ($type !~ m/^(five|seven)s/i)) {
      $conn->privmsg($to, $usage);
      return;
    }
    if ($proc =~ m/^(add|add_use)$/i) {
      push @{$data->{haiku}->{lc($type)}}, $phrase;
      $conn->privmsg($to, "Added.\n");
    }
    if ($proc =~ m/^(use|add_use)$/i) {
      my @fives;
      my @sevens;
      push @fives, @{$data->{haiku}->{fives}};
      push @sevens, @{$data->{haiku}->{sevens}};
      my $five = $fives[rand(@fives)];
      @fives = grep {!/$five/} @fives;

      my $five1;
      my $five2;
      my $seven;
      if ($type eq "fives") {
        if (rand() < 0.50){
          $five1 = $phrase;
          $five2 = $five;
        } else {
          $five2 = $phrase;
          $five1 = $five;
        }
        $seven = $sevens[rand(@sevens)];
      } else {
        $seven = $phrase;
        $five1 = $five;
        $five2 = $fives[rand(@fives)];
      }
      $conn->privmsg($to, $five1);
      $conn->privmsg($to, $seven);
      $conn->privmsg($to, $five2);
    }
    if ($proc =~ m/^remove$/i) {
      @{$data->{haiku}->{lc($type)}} =
        grep {!/$phrase/} @{$data->{haiku}->{lc($type)}};
      $conn->privmsg($to, "Removed.\n");
    }
  }
}

sub compose_poem {
  my ($conn, $to, $type) = @_;

  my @fives;
  my @sevens;
  push @fives, @{$data->{haiku}->{fives}};
  push @sevens, @{$data->{haiku}->{sevens}};

  my $five = $fives[rand(@fives)];
  @fives = grep {!/$five/} @fives;

  my $seven1 = $sevens[rand(@sevens)];
  @sevens = grep {!/$seven1/} @sevens;
  my $seven2 = $sevens[rand(@sevens)];
  @sevens = grep {!/$seven2/} @sevens;

  $conn->privmsg($to, $five);
  $conn->privmsg($to, $seven1);
  $conn->privmsg($to, $fives[rand(@fives)]);
  $conn->privmsg($to, $seven2) if ($type);
  $conn->privmsg($to, $sevens[rand(@sevens)]) if ($type);
}

sub saurus {
  my @args = @_;

  my %rtypes = qw( sim similar syn synonyms ant antonyms usr user-submitted );

  my $apikey = q(ab4c2716b98b1c76f4b889014214dadb);
  my $url = sprintf(qq(http://words.bighugelabs.com/api/2/%s/%s/json),
                    $apikey, $args[0]
    );

  my $hash;
  eval {
    $hash = decode_json(get($url));
  };
  if ($@) {
    print "saurus: $@";
  }

  my $result = "$args[0]: ";
  for my $key (keys %$hash) {
    next if $args[1] && $key ne $args[1];

    for my $type (keys %{$hash->{$key}}) {
      $result .= "* $rtypes{$type} ($key) - " .
        join(', ', @{$hash->{$key}->{$type}}) . "\n";
    }
  }
  return $result;
}

sub get_stockprice {
  my ($args) = @_;

  my $stocks =
    get(sprintf('http://download.finance.yahoo.com/d/quotes.csv?s=%s&f=snl1c1',
                join('+', split(/\s/, $args)))
    );

  $stocks =~ s/,/\t/g;
  $stocks =~ s/"//g;

  return $stocks;

  print $stocks;

}

sub get_morse {
  my $inarg = shift;
  my ($result, $trans, $splitter, $joiner);

  my %alpha2morse =
    ( 'a', '.-', 'b', '-...', 'c', '-.-.', 'd', '-..', 'e', '.', 'f',
      '..-.', 'g', '--.', 'h', '....', 'i', '..', 'j', '.---', 'k',
      '-.-', 'l', '.-..', 'm', '--', 'n', '-.', 'o', '---', 'p',
      '.--.', 'q', '--.-', 'r', '.-.', 's', '...', 't', '-', 'u',
      '..-', 'v', '...-', 'w', '.--', 'x', '-..-', 'y', '-.--', 'z',
      '--..', '1', '.----', '2', '..---', '3', '...--', '4', '....-',
      '5', '.....', '6', '-....', '7', '--...', '8', '---..', '9',
      '----.', '0', '-----', "\n", "\n", ' ', ' ',);

  my %morse2alpha = reverse %alpha2morse;

  if ($inarg =~ /[A-Za-z0-9]/) {
    $inarg = lc($inarg);
    $trans = \%alpha2morse;
    $splitter = "";
    $joiner = " ";
  }
  else {
    $inarg =~ s/\_/\-/g;
    $trans = \%morse2alpha;
    $splitter = " ";
    $joiner = "";
  }

  return join($joiner, map { $trans->{$_} } split(/$splitter/, $inarg));
}

sub update_horoscopes {
  my $time = time();
  if ($time - $data->{horoscopes}->{update} > 86400) {
    my $page =
      get(q(http://www.freewillastrology.com/horoscopes/printer-friendly.html));

    my $cursign;
    for my $line (split(/\n/, $page)) {
      next unless ($line =~ m/div class="body-bold">(\S*)\s+\(/i ..
                   $line =~ m%<p>%i);
      if ($1) {
        $cursign = lc($1);
        delete $data->{horoscopes}->{$cursign};
      }
      $line =~ s/<[^>]*>//g;
      $line =~ s/\)/\) /g;

      $data->{horoscopes}->{$cursign} .= $line;
    }
    $data->{horoscopes}->{update} = time();
  }
}

sub get_sniglet {
  my $wordlet = shift;
  my ($sniglets) = ("/home/james/devel/cim/projects/01_olga/data/sniglets.txt");
  my ($result);

  $wordlet =~ s/\s*//g;

  open(SNG,"<$sniglets") || warn "can't open $sniglets: $!";
  if ($wordlet) {
    while (<SNG>) {
      if (/^$wordlet/i) {
        chomp($_);
        $result = $_;
        last;
      }
    }
  }
  else {
    rand($.) < 1 && ($result = $_) while <SNG>;
  }
  close SNG;
  $result = "I dunno..." if (!$result);
  return $result;
}


sub get_abuse {
  my @styles = (0, 3);
  my $style = $styles[rand(@styles)];
  my $url = sprintf('http://www.webinsult.com/index.php?style=%s',
                    $style);

  my ($insult) = grep {/id="insult"/} split(/\n/,get($url));
  $insult =~ s/<[^>]*>//g;
  return lcfirst($insult);
}

sub update_bugs {
  my ($self, $init) = @_;

  my $bugs_rss = 'http://jira.ddtc.cmgdigital.com/sr/jira.issueviews:searchrequest-xml/10204/SearchRequest-10204.xml';

  eval {
    my $rss = XML::RSS->new;
    $rss->parse(get($bugs_rss));

    my %confirmed;
    for my $item (@{$rss->{'items'}}) {
      $confirmed{$item->{key}} = 1;
      unless ($data->{bugs}->{$item->{key}}) {
        $data->{bugs}->{$item->{key}} = $item->{title};

        unless ($init) {
          my $id = $item->{key};
          $id =~ s/[\[\]]//g;
          my $url = sprintf("http://jira.ddtc.cmgdigital.com/browse/%s",
                            $id);
          $self->privmsg($channel,
                         sprintf("*** New bug! %s %s\n",
                                 $item->{title}, $url)
                         );
        }
      }
    }
    for my $key (keys %{$data->{bugs}}) {
      delete ($data->{bugs}->{$key})
        unless $confirmed{$key};
    }
  };
  if ($@) {
    print "update_bugs: $@";
  }
}

sub update_resolves {
  my ($self, $init) = @_;

  my $resolved_rss = 'http://jira.ddtc.cmgdigital.com/sr/jira.issueviews:searchrequest-xml/10239/SearchRequest-10239.xml?tempMax=25';

  eval {
    my $rss = XML::RSS->new;
    $rss->parse(get($resolved_rss));


    for my $item (@{$rss->{'items'}}) {
      unless ($data->{resolves}->{$item->{key}}) {
        $data->{resolves}->{$item->{key}} = $item->{title};

        unless ($init) {
          my $id = $item->{key};
          $id =~ s/[\[\]]//g;
          my $url = sprintf("http://jira.ddtc.cmgdigital.com/browse/%s",
                            $id);
          $self->privmsg("#qa",
                         sprintf("*** Resolved! %s %s\n",
                                 $item->{title}, $url)
                         );
        }
      }
    }
  };
  if ($@) {
    print "update_resolves: $@";
  }
}

sub update_closed {
  my ($self, $init) = @_;

  my $closed_rss = 'http://jira.ddtc.cmgdigital.com/sr/jira.issueviews:searchrequest-xml/10303/SearchRequest-10303.xml?tempMax=50';

  eval {
    my $rss = XML::RSS->new;
    $rss->parse(get($closed_rss));

    for my $item (@{$rss->{'items'}}) {
      unless (grep { /^$item->{key}$/ } @{$data->{closed}}) {
        push @{$data->{closed}}, $item->{key};

        unless ($init) {
          my $id = $item->{key};
          $id =~ s/[\[\]]//g;
          $self->privmsg("#all",
                         sprintf("*** Closed! %s %s\n",
                                 $item->{title}, $id)
                         );
        }
      }
    }
  };
  if ($@) {
    print "update_closes: $@";
  }
}

sub update_fails {
  my ($self, $init) = @_;

  eval {
    my $feed = XMLin(
      get('http://vcs.ddtc.cmgdigital.com:9191/hudson/rssFailed')
      );

    my $skipfails = join('|', qw( gitstat newmaster.signin selenium ));

    for my $key (keys %{$feed->{entry}}) {
      my $entry = $feed->{entry}->{$key};

      unless ($data->{hudson}->{$entry->{title}}) {
        $data->{hudson}->{$entry->{title}} = $entry->{link}->{href};
        unless ($init) {
          my $params = get($entry->{link}->{href});
          $params =~ s/^.*buildWithParameters\?([^"]*)".*$/$1/s;

          $params = join(' ',
                         map { my ($k, $v) = split(/=/,$_); "$bParams{$k}: $v" }
                         split(/\&amp;/, $params));

          $self->privmsg($channel,
                         "$entry->{title}: $entry->{link}->{href} $params\n")
            unless ($entry->{title} =~ m/$skipfails/i)
        }
      }
    }
  };
  if ($@) {
    print $@;
  }
}

sub update_latest {
  my @urls = qw(view/Developer%20View/rssLatest rssLatest);
  my $dtf = DateTime::Format::W3CDTF->new;

  for my $url (@urls) {
    eval {
      my $feed =
        XMLin(
          get(sprintf(
                'http://vcs.ddtc.cmgdigital.com:9191/hudson/%s',
                $url,
              )));

      for my $key (keys %{$feed->{entry}}) {
        my $entry = $feed->{entry}->{$key};

        my $latestkey = lc($entry->{title});
        $latestkey =~ s/^(\S*)\s+.*/$1/;

        my $dt = $dtf->parse_datetime($entry->{published})
          ->set_time_zone('local');

        $data->{latest}->{$latestkey} = sprintf('%s %s %s',
                                                $dt->strftime('%F %T'),
                                                $entry->{title},
                                                $entry->{link}->{href},
        );
      }
    };
    if ($@) {
      print $@;
    }
  }
}

sub init_data {
  my ($conn) = @_;

  if (!-e $data->{jsonfile}) {
    #&update_bugs($conn, 1);
    #&update_resolves($conn, 1);
    #&update_closed($conn, 1);
    #&update_fails($conn, 1);
    #&update_latest();
    &update_horoscopes();

    &write_data();
  }

  open(FILE,"<$data->{jsonfile}") || warn "Can't open $data->{jsonfile}: $!";
  my $json = do { local $/; <FILE>; };
  close(FILE);

  $data = decode_json($json);
}

sub write_data {
  my $json = encode_json($data);

  open(FILE,">$data->{jsonfile}") || warn "Can't open $data->{jsonfile}: $!";
  print FILE $json;
  close(FILE);
}

